# 默认向应用程序公开HDR10 ColorSpace (DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020)。
# 这告诉游戏全局Windows的'HDR模式'已启用。
# 许多（有问题的）游戏需要设置此项以考虑公开HDR输出，
# 因为它们是基于DXGIOutput的当前ColorSpace来确定的，而不是
# 使用CheckColorSpaceSupport。
# 此项默认为DXVK_HDR环境变量的值。
#
# 支持的值：True，False

# dxgi.enableHDR = True

# 在第一次调用IDXGISwapChain::Present时创建VkSurface，
# 而不是在创建交换链时。一些开始时使用不同图形API渲染的游戏可能需要此选项，
# 否则窗口可能会保持黑屏。
#
# 支持的值：True，False

# dxgi.deferSurfaceCreation = False
# d3d9.deferSurfaceCreation = False


# 强制执行更严格的最大帧延迟。覆盖通过调用IDXGIDevice::SetMaximumFrameLatency
# 指定的应用程序设置。将此设置为0将无效。
#
# 支持的值：0 - 16

# dxgi.maxFrameLatency = 0
# d3d9.maxFrameLatency = 0


# 启用帧率限制器。这主要是为了解决那些将物理或其他模拟与其帧率绑定
# 但不提供自己的限制器的游戏中的问题。
#
# 支持的值：任何非负整数

# dxgi.maxFrameRate = 0
# d3d9.maxFrameRate = 0


# 覆盖报告给应用程序的PCI供应商和设备ID。可以
# 导致应用程序根据选定的值调整行为。
#
# 支持的值：任何四位十六进制数。

# dxgi.customDeviceId = 0000
# dxgi.customVendorId = 0000

# d3d9.customDeviceId = 0000
# d3d9.customVendorId = 0000


# 覆盖报告的设备描述
#
# 支持的值：任何字符串。

# dxgi.customDeviceDesc = ""
# d3d9.customDeviceDesc = ""


# 将Nvidia GPU报告为AMD GPU。除非通过proton明确
# 启用了NVAPI支持，否则默认情况下会这样做，以解决
# Nvidia特定代码路径在游戏中的崩溃或低性能问题，
# 尤其是Unreal引擎。

# 支持的值：自动，真，假

# dxgi.hideNvidiaGpu = 自动


# 将AMD GPU报告为Nvidia GPU。这只针对已知存在
# AMDAGS或其他AMD特定代码路径问题的游戏。
#
# 支持的值：自动，真，假

# dxgi.hideAmdGpu = 自动


# 将Intel GPU报告为AMD GPU。这只针对已知存在
# Intel特定库（如XESS）问题的游戏。
#
# 支持的值：自动，真，假

# dxgi.hideIntelGpu = 自动


# 覆盖向应用程序报告的设备内存和共享系统内存的最大数量。
# 这可能修复了不支持具有大量VRAM的卡的游戏中的纹理流问题。
#
# 支持的值：以兆字节为单位的任何数。

# dxgi.maxDeviceMemory = 0
# dxgi.maxSharedMemory = 0


# 一些游戏认为我们在Intel上，因为没有NVAPI或
# AGS/atiadlxx支持。将我们的设备内存报告为共享内存，
# 并为"carveout"提供一些小的数量。

# 支持的值：真，假

# dxgi.emulateUMA = 假


# 覆盖Vulkan交换链的后缓冲计数。
# 将此设置为0或更小将无效。
#
# 支持的值：任何大于或等于2的数。

# dxgi.numBackBuffers = 0
# d3d9.numBackBuffers = 0


# 覆盖同步间隔（Vsync）以进行展示。
# 将此设置为0将完全禁用垂直同步。
# 正值'n'将启用Vsync并重复n次相同
# 的图像，负值将无效。
#
# 支持的值：任何非负数

# dxgi.syncInterval = -1
# d3d9.presentInterval = -1


# 如果常规Vsync被禁用，True启用邮箱展示模式。
# 这应该避免撕裂，但在某些系统上可能不受支持
# 或者需要将dxgi.numBackBuffers设置为更高的值以便
# 正常工作。
#
# 如果常规Vsync被启用，False启用轻松的fifo展示模式。
# 这应该导致撕裂但如果FPS过低则减少卡顿，
# 但在某些系统上可能不受支持。
#
# 请不要报告此选项的问题。
#
# 支持的值：自动，真，假

# dxvk.tearFree = 自动


# 假设在延迟上下文上创建的命令列表为单次使用模式。
# 可能需要为一些应用程序禁用此选项以避免渲染
# 问题，这可能会带来显著的性能损失。
#
# 支持的值：真，假

# d3d11.dcSingleUseMode = 真


# 覆盖可以创建D3D11设备的最大特性级别。
# 将此设置为更高的值可能允许一些应用程序运行
# 否则无法创建D3D11设备。
#
# 支持的值：9_1，9_2，9_3，10_0，10_1，11_0，11_1，12_0，12_1

# d3d11.maxFeatureLevel = 12_1


# 覆盖允许的最大镶嵌因子。可以用来
# 改善过度使用镶嵌的标题的性能。
# 
# 支持的值：8和64之间的任何数

# d3d11.maxTessFactor = 0


# 启用UAV写入周围的轻松管道障碍。
# 
# 这可能在某些游戏中提高性能，但也可能引入
# 渲染问题。请不要在启用此选项时报告错误。
#
# 支持的值：真，假

# d3d11.relaxedBarriers = 假


# 忽略来自片段着色器的UAV写入的障碍。
#
# 这可能在某些游戏中提高性能，但也可能引入
# 渲染问题。请不要在启用此选项时报告错误。
#
# 支持的值：真，假

# d3d11.ignoreGraphicsBarriers = 假


# 覆盖所有采样器的各向异性过滤。将此设置为正
# 值以启用游戏中所有采样器的AF，或设置为0以
# 完全禁用AF。负值将无效。
# 
# 支持的值：0和16之间的任何数

# d3d11.samplerAnisotropy = -1
# d3d9.samplerAnisotropy = -1


# 改变所有采样器的mipmap LOD偏差。给定的数将被
# 添加到应用程序提供的LOD偏差，而不是完全替换
# 它。正值将降低纹理细节，而负值可能增加锐度，但代价是闪烁。
#
# 支持的值：-2.0和1.0之间的任何数

# d3d11.samplerLodBias = 0.0
# d3d9.samplerLodBias = 0.0


# 将任何负LOD偏差限制为0。在应用samplerLodBias后
# 应用。可能帮助默认使用高负LOD偏差的游戏。
#
# 支持的值：真，假

# d3d11.clampNegativeLodBias = 假
# d3d9.clampNegativeLodBias = 假


# 为了解决潜在的Z-fighting问题，以较小的性能代价
# 将顶点位置声明为不变。
#
# 支持的值：真，假

# d3d11.invariantPosition = 真
# d3d9.invariantPosition = 真


# 当启用MSAA时，强制每个样本的着色率，而不是每像素
# 的着色。可能在显著性能代价下改善视觉清晰度，但
# 也可能在某些游戏中引入视觉问题。
#
# 支持的值：真，假

# d3d11.forceSampleRateShading = 假
# d3d9.forceSampleRateShading = 假


# 将所有纹理的样本数强制为1，并在解析操作和着色器中
# 进行所需的修复。
#
# 支持的值：真，假

# d3d11.disableMsaa = 假


# 在计算着色器中将工作组内存清零。一些游戏不这样做
# 并依赖于未定义的行为。启用可能会降低性能。
#
# 支持的值：真，假

# d3d11.zeroWorkgroupMemory = 假


# 隐式丢弃的资源大小限制，以千字节为单位。对于小型暂存
# 资源使用MAP_WRITE，DXVK有时会分配新的备份
# 存储以避免GPU同步，因此将此设置过高
# 可能会导致内存问题，将其设置为-1将禁用此功能。

# d3d11.maxImplicitDiscardSize = 256


# 缓冲映射动态图像的资源大小限制，以千字节为单位。
# 更高的阈值可能会在某些游戏中减少内存使用和PCI-E带宽，
# 但也可能增加GPU同步。将其设置为-1将禁用此功能。

# d3d11.maxDynamicImageBufferSize = -1


# 使用给定的绑定标志集在缓存的系统内存中分配动态资源，
# 而不是在未缓存的内存或主机可见的VRAM中，以便允许CPU快速读回。
# 这只对有问题的应用程序有用，并可能降低GPU绑定的性能。
#
# 支持的值：以下任何组合：
# - v：顶点缓冲区
# - i：索引缓冲区
# - c：常量缓冲区
# - r：着色器资源
# - a：所有动态资源

# d3d11.cachedDynamicResources = ""


# 通过ID3D10Multithread接口强制启用D3D11上下文锁。
# 这可能有助于调试竞态条件。
#
# 支持的值：真，假

# d3d11.enableContextLock = 假


# 设置管道编译器线程数。
# 
# 如果启用了图形管道库功能，则给定
# 数量的线程将用于着色器编译。其中一些
# 线程将被保留用于高优先级工作。
#
# 支持的值：
# - 0表示使用所有可用的CPU核心
# - 任何正数强制线程计数

# dxvk.numCompilerThreads = 0


# 切换原始SSBO使用。
# 
# 使用存储缓冲区来实现原始和结构化缓冲区
# 视图。默认在存储缓冲区偏移对齐要求为4字节的硬件上启用（例如AMD）。
# 启用此选项可能会提高性能，但在对齐要求更高的硬件上不安全。
# 
# 支持的值：
# - 自动：不改变默认值
# - 真，假：始终启用/禁用

# dxvk.useRawSsbo = 自动


# 更改内存块大小。
#
# 可用于覆盖最大内存块大小。
#
# 支持的值：
# - 0表示使用默认值
# - 任何正整数以限制块大小，单位为MiB

# dxvk.maxChunkSize = 0


# 控制图形管道库行为
#
# 可用于更改VK_EXT_graphics_pipeline_library的使用情况以进行
# 调试目的。这样做可能会导致增加的卡顿
# 或性能下降。
#
# 支持的值：
# - 自动：如果支持，启用，并在后台编译优化的管道
# - 真：如果支持，启用，但不编译优化的管道
# - 假：始终禁用该功能

# dxvk.enableGraphicsPipelineLibrary = 自动


# 控制管道生命周期跟踪
#
# 如果启用，管道库将被积极地释放以节省
# 内存和地址空间。如果不支持图形管道库或已禁用，将无效。
#
# 支持的值：
# - 自动：仅为32位应用程序启用跟踪
# - 真：始终启用跟踪
# - 假：始终禁用跟踪

# dxvk.trackPipelineLifetime = 自动


# 设置启用的HUD元素
# 
# 行为类似于DXVK_HUD环境变量，如果
# 环境变量未设置，否则将被
# 忽略。语法是相同的。

# dxvk.hud = 


# 报告的着色模型
#
# 我们在设备中声明支持的着色模型
# 应用程序查询的能力。
# 
# 支持的值
# - 1：着色模型1
# - 2：着色模型2
# - 3：着色模型3

# d3d9.shaderModel = 3


# DPI感知
# 
# 决定我们是否应在设备创建时调用SetProcessDPIAware。
# 有助于避免在现代Windows上的高DPI屏幕/设备上出现放大模糊。
#
# 支持的值：
# - 真，假：始终启用/禁用

# d3d9.dpiAware = 真


# 严格的常量复制
# 
# 决定我们是否应在使用相对寻址时总是将定义的常量复制到
# UBO中，或者只在相对寻址开始定义常量时这样做。
#
# 支持的值：
# - 真，假：始终启用/禁用

# d3d9.strictConstantCopies = 假


# 严格的Pow
# 
# 决定我们是否有一个opSelect用于处理pow(0,0) = 0
# 否则它变得未定义。
#
# 支持的值：
# - 真，假：始终启用/禁用

# d3d9.strictPow = 真


# 宽松的Clear
#
# 决定我们是否无论如何都快速清除，如果我们足够接近
# 清除完整的渲染目标。
#
# 支持的值：
# - 真，假：始终启用/禁用

# d3d9.lenientClear = 假


# 最大可用内存
#
# 改变用于跟踪和GetAvailableTextureMem的最大初始值
# 值以兆字节为单位
#
# 支持的值：
# - 最大可用内存：任何int32_t
# - 内存跟踪测试：真，假

# d3d9.maxAvailableMemory = 4096
# d3d9.memoryTrackTest = 假


# 强制启用/禁用浮点怪癖仿真
#
# 强制切换任何 * 0仿真
# 将其设置为True将使用更快但不太准确的方法，对大多数游戏来说足够好。
# 支持的值：
# - 真：使用更快但不太准确的方法。对大多数游戏来说足够好
# - 假：完全禁用浮点仿真
# - 严格：使用更慢但更正确的方法。对某些游戏来说是必要的
# - 自动：DXVK将自动选择

# d3d9.floatEmulation = 自动


# 启用对话框模式
#
# 改变对话框模式的默认状态。
# 启用时*禁用*独占全屏。
#
# 支持的值：
# - 真，假：始终启用/禁用

# d3d9.enableDialogMode = 假

# 覆盖交换链上的应用程序的MSAA级别
# 
# 支持的值：-1（应用程序）和0到16（用户覆盖）

# d3d9.forceSwapchainMSAA = -1


# 长Mad
#
# 我们应该让我们的Mads成为一个FFma还是用FMul和FAdd的长方法做？
# 这解决了一些在z-pass着色器与常规顶点着色器在这方面不完全匹配的游戏中的渲染问题。
#
# 支持的值：
# - 真/假

# d3d9.longMad = 假

# 设备本地常量缓冲区
#
# 在D3D9中启用使用设备本地，主机可访问的内存用于常量缓冲区。
# 这在AMD上实际上往往更慢，
# 在NVIDIA上性能相同。
#
# 支持的值：
# - 真/假

# d3d9.deviceLocalConstantBuffers = 假

# 支持DF格式
#
# 支持供应商扩展DF浮点深度格式
#
# 支持的值：
# - 真/假

# d3d9.supportDFFormats = 真

# 使用D32f代替D24
#
# 用于在其他硬件上复现AMD问题。
#
# 支持的值：
# - 真/假

# d3d9.useD32forD24 = 假

# 支持X4R4G4B4
#
# 支持X4R4G4B4格式。
# 模拟人生2是一个非常有问题的游戏。
#
# 支持的值：
# - 真/假

# d3d9.supportX4R4G4B4 = 真

# 支持D32
#
# 支持D32格式。
#
# 支持的值：
# - 真/假

# d3d9.supportD32 = 真

# 禁用A8作为渲染目标
#
# 禁用对A8格式渲染目标的支持
# 再次，模拟人生2是一个非常有问题的游戏。
#
# 支持的值：
# - 真/假

# d3d9.disableA8RT = 假

# 支持VCache查询
#
# 支持vcache查询
# 作为用户配置不是很重要。
# 内部使用。
#
# 支持的值：
# - 真/假

# 如果vendorId == 0x10de，默认为真
# d3d9.supportVCache = 真

# 强制采样器类型Spec常量
#
# 如果游戏使用错误的图像和采样器
# 类型组合，如Halo：CE或Spellforce。
# 可以在某些情况下修复旧的，有问题的游戏的渲染。
#
# 支持的值：
# - 真/假

# d3d9.forceSamplerTypeSpecConstants = 假

# 强制宽高比
#
# 只公开具有给定宽高比的模式。
# 对于看到超宽屏时会崩溃的标题很有用。
#
# 支持的值：
# - 任何比例，例如"16:9"，"4:3"

# d3d9.forceAspectRatio = ""

# 按显示器枚举
#
# 我们是否应按显示器（windows行为）枚举D3D9适配器
# 或按物理适配器。
# 在PRIME设置中可能有用。
#
# 支持的值：
# - 真/假

# d3d9.enumerateByDisplays = 真

# 缓存动态缓冲区
#
# 在D3DPOOL_DEFAULT中分配动态资源
# 缓存的系统内存，而不是未缓存的内存或主机可见的
# VRAM，以便允许CPU快速读回。这只对有问题的应用程序有用，并可能降低GPU绑定的性能。
#
# 支持的值：
# - 真/假

# d3d9.cachedDynamicBuffers = 假

# 无缝立方体
#
# 即使它们受支持，也不使用非无缝立方图。
# 非无缝立方体是正确的d3d9行为，但可能产生边缘效果不好。
#
# 支持的值：
# - 真/假

# d3d9.seamlessCubes = 假

# 调试工具
#
# 启用调试工具，因为这默认是关闭的，这启用了用户注释，如BeginEvent()/EndEvent()。
# 也可以通过DXVK_DEBUG=markers环境变量启用。
#
# 支持的值：
# - 真/假

# dxvk.enableDebugUtils = 假

# 锁定D3D9纹理的内存限制
#
# 将用于纹理的虚拟内存使用多少（以MB为单位）。
# 0表示禁用限制。
# 这不会影响实际的内存消耗或纹理质量。
# 除非你有非常好的理由，否则不要改变这个。

# d3d9.textureMemory = 100

# 在每个dxgi输出上始终枚举所有监视器
#
# 用于避免某些游戏的性能下降
# （一旦Proton Wine中的QueryDisplayConfig优化
# 就会被弃用）。
#
# 支持的值：
# - 真/假

# dxgi.useMonitorFallback = 假


# 隐藏集成图形处理器
#
# 只有在系统上存在专用GPU时才有效。不建议
# 使用此选项，除非对游戏工作绝对必要；
# 优先使用DXVK_FILTER_DEVICE_NAME。
#
# 支持的值：
# - 真/假

# dxvk.hideIntegratedGraphics = 假

# 在失去焦点时触发DEVICELOST
#
# D3D9要求应用程序在全屏失去焦点后调用Device::Reset。
# 一些游戏依赖观察D3DERR_DEVICELOST或D3DERR_NOTRESET。
# 其他游戏无法正确处理它。
#
# 支持的值：
# - 真，假

# d3d9.deviceLossOnFocusLoss = 假

# 如果任何可丢失的资源仍然存在，则拒绝Device::Reset
#
# D3D9在仍有任何类型的资源存在时拒绝Device::Reset。
# （状态块，额外的交换链，D3DPOOL_DEFAULT资源）
# 一些游戏泄露资源导致挂起。
#
# 支持的值：
# - 真，假

# d3d9.countLosableResources = 真
